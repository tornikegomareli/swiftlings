{
  "format_version": 1,
  "welcome_message": "Welcome to Swiftlings! ðŸ¦‰\n\nIs this your first time? Don't worry, Swiftlings is made for beginners!\nWe are going to teach you a lot of things about Swift, but before we can\nget started, here are some notes about how Swiftlings operates:\n\n1. The central concept behind Swiftlings is that you solve exercises. These\n   exercises usually contain some compiler or logic errors which cause the\n   exercise to fail compilation or testing. It's your job to find all errors\n   and fix them!\n2. Make sure to have your editor open in the project directory. Swiftlings\n   will show you the path of the current exercise. Open the exercise file\n   in your editor, fix errors and save the file. Swiftlings will automatically\n   detect the file change and rerun the exercise.\n3. If you're stuck on an exercise, enter 'h' to show a hint.\n4. Have fun learning Swift!",
  "final_message": "ðŸŽ‰ Congratulations! You've completed all Swiftlings exercises!\n\nWe hope you enjoyed learning about Swift!\nIf you noticed any issues, don't hesitate to report them on GitHub.\nYou can also contribute your own exercises to help the community!",
  "exercises": [
    {
      "name": "intro1",
      "dir": "00_basics",
      "hint": "This exercise compiles successfully! Run it to see the output."
    },
    {
      "name": "intro2",
      "dir": "00_basics",
      "hint": "Swift uses 'print()' not 'println()'. The 'ln' part is automatic!"
    },
    {
      "name": "variables1",
      "dir": "00_basics",
      "hint": "Variables in Swift are declared with 'var' keyword. Try: var x = 5"
    },
    {
      "name": "variables2",
      "dir": "00_basics",
      "hint": "The 'let' keyword creates constants that cannot be changed. Use 'var' for values that need to change!"
    },
    {
      "name": "variables3",
      "dir": "00_basics",
      "hint": "Use 'let' for values that won't change (like pi), and 'var' for values that will change (like radius)."
    },
    {
      "name": "types1",
      "dir": "00_basics",
      "hint": "String for text, Int for whole numbers, Double for decimal numbers. Match the type to the value!"
    },
    {
      "name": "types2",
      "dir": "00_basics",
      "hint": "Add a type annotation like 'let temperature: Double' or use a decimal initial value like '100.0'"
    },
    {
      "name": "operators1",
      "dir": "00_basics",
      "hint": "Remember: + for addition, - for subtraction, * for multiplication, / for division, % for remainder"
    },
    {
      "name": "operators2",
      "dir": "00_basics",
      "hint": "Use >= for 'greater than or equal', && for 'and', || for 'or'. For ranges, combine conditions with &&"
    },
    {
      "name": "strings1",
      "dir": "00_basics",
      "hint": "Use \\(variableName) inside strings for interpolation. For concatenation, use the + operator."
    },
    {
      "name": "strings2",
      "dir": "00_basics",
      "hint": "Multi-line strings use triple quotes \"\"\" at the start and end. Use \\ for escape sequences like \\\" and \\n"
    },
    {
      "name": "if1",
      "dir": "01_control_flow",
      "hint": "The condition in an if statement must be a Bool. Use comparison operators like >= to create boolean conditions."
    },
    {
      "name": "if2",
      "dir": "01_control_flow",
      "hint": "Use < for age check. For multiple conditions, use || (OR) to check if student OR senior (age >= 65)."
    },
    {
      "name": "switch1",
      "dir": "01_control_flow",
      "hint": "Each case needs a return statement. Swift doesn't fall through cases by default."
    },
    {
      "name": "switch2",
      "dir": "01_control_flow",
      "hint": "Use ranges in switch cases: 90...100 for A, 80...89 for B, etc. Check for invalid scores first!"
    },
    {
      "name": "loops1",
      "dir": "01_control_flow",
      "hint": "Use ... for closed range (includes both bounds). For even numbers, check if number % 2 == 0."
    },
    {
      "name": "loops2",
      "dir": "01_control_flow",
      "hint": "Change != to ==, increment with +=, and use 'while' instead of 'if' for the digit collection."
    },
    {
      "name": "loops3",
      "dir": "01_control_flow",
      "hint": "Use 'return number' to exit the function early. Use 'continue' to skip to the next iteration."
    },
    {
      "name": "functions1",
      "dir": "02_functions",
      "hint": "Add -> String return type. Add parameters (a: Int, b: Int). Use parameter names inside the function body."
    },
    {
      "name": "functions2",
      "dir": "02_functions",
      "hint": "Change 'x' and 'y' to 'base' and 'exponent'. Add 'of' before number. Use _ to omit external name."
    },
    {
      "name": "functions3",
      "dir": "02_functions",
      "hint": "Add = 1.0 for default rate. Use '...' for variadic: (numbers: Int...). Add default values with =."
    },
    {
      "name": "functions4",
      "dir": "02_functions",
      "hint": "Add 'inout' before parameter types. The function modifies the original values passed with &."
    },
    {
      "name": "functions5",
      "dir": "02_functions",
      "hint": "Function type is (Int, Int) -> Int. Parameter type should accept functions. Return type is a function."
    },
    {
      "name": "arrays1",
      "dir": "03_collections",
      "hint": "Use commas between elements. Empty array: [String](). Type should be Array<Double>. Arrays start at index 0. Use .count property."
    },
    {
      "name": "arrays2",
      "dir": "03_collections",
      "hint": "Use .append(), .insert(_:at:), .removeLast(). Filter needs == 0. String interpolation needs \\()."
    },
    {
      "name": "dictionaries1",
      "dir": "03_collections",
      "hint": "Use : between key and value. Empty dict: [:]. Values should be Double. Use [key] = value syntax. Use .count property."
    },
    {
      "name": "dictionaries2",
      "dir": "03_collections",
      "hint": "Unwrap before +=. Use .updateValue(_:forKey:). Use .removeValue(forKey:). Assign nil to remove."
    },
    {
      "name": "sets1",
      "dir": "03_collections",
      "hint": "Use square brackets []. Empty: Set<String>(). Convert each string to Character. Use .union(), .intersection(), .subtracting()."
    },
    {
      "name": "optionals1",
      "dir": "04_optionals",
      "hint": "Use 'if let name = name'. Add ! to force unwrap. Use ?? \"Unknown\" for default value."
    },
    {
      "name": "optionals2",
      "dir": "04_optionals",
      "hint": "Use 'guard let name = name'. Combine with commas. Use the unwrapped value in conditions and operations."
    },
    {
      "name": "optionals3",
      "dir": "04_optionals",
      "hint": "Add ? for optional chaining. Use person1 for city. Access through optional chain: ?. for each level."
    },
    {
      "name": "optionals4",
      "dir": "04_optionals",
      "hint": "Add ?? \"light\". Chain with ?? 16. Use parentheses: (saved ?? true). Handle double optionals with ?? and casting."
    },
    {
      "name": "structs1",
      "dir": "05_structs",
      "hint": "Use 'struct' keyword. Add properties to Person. Use Point(x: 10, y: 20) syntax. Structs get automatic initializers."
    },
    {
      "name": "structs2",
      "dir": "05_structs",
      "hint": "Add -> Double return type. Perimeter = 2 * (width + height). Check width == height. Use 'static' for class methods."
    },
    {
      "name": "structs3",
      "dir": "05_structs",
      "hint": "Fahrenheit needs get/set. Kelvin = celsius + 273.15, remove setter. Use <= 0 for freezing. Use 'var' for computed properties."
    },
    {
      "name": "structs4",
      "dir": "05_structs",
      "hint": "Add 'mutating' keyword. Initialize balance = 0. Add second init. Check balance >= amount before withdrawing."
    },
    {
      "name": "classes1",
      "dir": "06_classes",
      "hint": "Change to 'class'. Add init method. Car should inherit (: Vehicle). Call super.init after setting properties."
    },
    {
      "name": "classes2",
      "dir": "06_classes",
      "hint": "Remove 'final' to allow override. Add 'override' keyword. Set properties before super.init. Return \"Meow!\" with exclamation."
    },
    {
      "name": "classes3",
      "dir": "06_classes",
      "hint": "Make fileHandle private. Use 'static' for class property. Add deinit {}. Change 'private' to 'fileprivate' for verifyPin."
    },
    {
      "name": "classes4",
      "dir": "06_classes",
      "hint": "Add 'lazy' keyword. Make shared 'static'. Use 'class' instead of 'static' for overridable methods. Make init private."
    },
    {
      "name": "enums1",
      "dir": "07_enums",
      "hint": "Add cases to CompassDirection. Raw values auto-increment from 1. Use .rawValue property. Use init(rawValue:) for creation."
    },
    {
      "name": "enums2",
      "dir": "07_enums",
      "hint": "Remove labels from case definition. Add (Int, Int, Int, Int) to upc case. Extract values in switch cases. Use let to bind values."
    },
    {
      "name": "enums3",
      "dir": "07_enums",
      "hint": "Complete all switch cases. Check rawValue <= 4 for isInner. Make allCases static. Operations should return calculated results."
    },
    {
      "name": "enums4",
      "dir": "07_enums",
      "hint": "Add : CaseIterable. Use 'indirect' for recursive enum. Evaluate recursively. Count: 1 + next.count(). Array: [value] + next.toArray()."
    },
    {
      "name": "protocols1",
      "dir": "08_protocols",
      "hint": "Add property/method requirements to protocols. Conform with : Protocol. Implement all requirements. Use Describable as parameter type."
    },
    {
      "name": "protocols2",
      "dir": "08_protocols",
      "hint": "Add : Vehicle to inherit. Use 'extension Vehicle' for defaults. Return formatted string. Add where T: Vehicle constraint."
    },
    {
      "name": "protocols3",
      "dir": "08_protocols",
      "hint": "Use Named & Aged for composition. Add : Container to Stack. Fix count and getAll. Use items.removeLast() for retrieve."
    },
    {
      "name": "protocols4",
      "dir": "08_protocols",
      "hint": "Add : AnyObject for class-only. Use 'weak var delegate'. Set downloader.delegate = self. Comment out struct conformance."
    },
    {
      "name": "extensions1",
      "dir": "09_extensions",
      "hint": "Add 'var isEven: Bool { self % 2 == 0 }'. Use components(separatedBy:). Add 'where Element == Int'. Use pow() for rounding."
    },
    {
      "name": "extensions2",
      "dir": "09_extensions",
      "hint": "Add : Describable to extension. Use String(repeating:count:). Check indices.contains(). Add where Element: Describable."
    },
    {
      "name": "extensions3",
      "dir": "09_extensions",
      "hint": "Add 'where Element: Numeric'. Use reduce. Add enum ValidationError inside extension. Return \"ID-\\(Int.random(in: 10000...99999))\"."
    },
    {
      "name": "extensions4",
      "dir": "09_extensions",
      "hint": "Add 'where Value: Numeric' and 'where Key == String'. Use 'guard let self else { throw }'. Add 'where Element: Priceable'."
    },
    {
      "name": "generics1",
      "dir": "10_generics",
      "hint": "Add <T> after function name. Change parameter/return types to T. Add <T: Comparable>. Use <T, U> for multiple parameters."
    },
    {
      "name": "generics2",
      "dir": "10_generics",
      "hint": "Add <T: Equatable>. Add <T: Numeric>. Use <T: Comparable & CustomStringConvertible>. Add 'where T: Comparable' to method."
    },
    {
      "name": "generics3",
      "dir": "10_generics",
      "hint": "Add 'associatedtype Item'. Use items.removeFirst(). Capture store in var. Implement storage[key] = value."
    },
    {
      "name": "generics4",
      "dir": "10_generics",
      "hint": "Add 'where Failure: Error'. Check case with switch. Add ': Equatable where Success: Equatable, Failure: Equatable'. Use '-> some Shape'."
    }
  ]
}